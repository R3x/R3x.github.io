<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Systemcalls on Siddharth&#39;s Blog</title>
    <link>https://R3x.github.io/tags/systemcalls/</link>
    <description>Recent content in Systemcalls on Siddharth&#39;s Blog</description>
    <image>
      <url>https://R3x.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://R3x.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://R3x.github.io/tags/systemcalls/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exec System Call</title>
      <link>https://R3x.github.io/posts/linux_system_calls/exec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://R3x.github.io/posts/linux_system_calls/exec/</guid>
      <description>Exec System Call Welcome to the first installment in a blog series that will takes a deep dive into the mechanics of system calls. Today, we&amp;rsquo;re kicking things off with the exec system calls, a fundamental feature in Unix and Linux operating systems.
Glibc version used : 2.37 Bootlin
Introduction to the exec library calls Note: Please skip this section if you are already familiar with exec library calls.
In Unix and Linux systems, the exec family of library calls plays an essential role in process creation and management.</description>
    </item>
    
  </channel>
</rss>
